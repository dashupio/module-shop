<page-checkout-view>
  <div>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.product.model') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for the checkout product.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.product.form') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>form</b> for the checkout product.
    </a>

    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.order.model') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for the checkout order.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.order.form') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>form</b> for the checkout order.
    </a>

    <div if={ loading('grid') } class="text-center my-5 py-5">
      <i class="fa fa-spin fa-spinner h1" />
    </div>
    <div if={ !loading('grid') && props.page.get('data.order.form') } class="dashup-grid">
      <dashup-view view="grid" type="page" struct="grid" model={ props.page.get('data.order.model') } groups={ getGroups() } fields={ getFields() } get-field={ getField } { ...getProps() } />
    </div>
  </div>

  <script>
    // export default
    export default class PageModelView {

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // safe update
        this.safeUpdate = () => {
          this.update();
        };

        // bind methods
        this.getField = this.getField.bind(this);

        // listeners
        this.props.page.on('reload', this.safeUpdate);
        this.props.page.on('data.order', this.safeUpdate);
      }

      /**
       * on before mount
       */
      onBeforeUnmount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // listeners
        this.props.page.removeListener('reload', this.safeUpdate);
        this.props.page.removeListener('data.order', this.safeUpdate);
      }

      /**
       * get field
       */
      getField({ type }) {
        // return field
        return this.props.fields.find((f) => f.type === type);
      }

      /**
       * gets all fields
       */
      getFields() {
        // reduce
        return [this.props.page.get('data.order.form'), this.props.page.get('data.product.form')].filter((f) => f).reduce((accum, id) => {
          // get page
          const page = this.props.dashup.page(id);

          // check page
          if (!page || !page.get('data.fields')) return accum;

          // loop fields
          accum.push(...page.get('data.fields'));

          // return accum
          return accum;
        }, []);
      }

      /**
       * get groups
       */
      getGroups() {
        // get group
        if (!this.props.page.get('data.group')) return;

        // get group field
        const actualGroup = this.getFields().find((f) => f.uuid === this.props.page.get('data.group'));

        // check group
        if (!actualGroup) return;

        // return group
        return (actualGroup.options || []);
      }

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.type;
        delete newProps.view;
        delete newProps.item;
        delete newProps.class;
        delete newProps.struct;
        delete newProps.fields;

        // return
        return newProps;
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-checkout-view>