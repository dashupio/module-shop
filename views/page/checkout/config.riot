<page-checkout-config>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Auth Module (optional)
      </label>
      <!-- TODO move to @dashup calls -->
      <eden-select on-change={ (e, val) => onAuth(val) } ref={ ref('auth') } placeholder="Select Auth Module" data={ getAuth() } />
    </div>

    <hr />
    
    <div class="mb-3">
      <label class="form-label">
        Order Model
      </label>
      <eden-select on-change={ (e, val) => onOrder(val) } ref={ ref('order') } placeholder="Select Model" data={ getOrder() } />
    </div>
    
    <div class="mb-3" if={ props.page.get('data.order.model') }>
      <label class="form-label">
        Order Form
      </label>
      <eden-select on-change={ (e, val) => onOrderForm(val) } ref={ ref('orderForm') } placeholder="Select Form" data={ getOrderForm() } />
    </div>
    
    <div class="card border bg-white" if={ props.page.get('data.order.form') }>
      <div class="card-header">
        Order Fields
      </div>
      <div class="card-body">
        <div class="mb-3" each={ (field, i) in orderFields }>
          <label class="form-label">
            Order { field.name }
          </label>
          <eden-select on-change={ (e, val) => onField('order', field.name.split(' ')[0].toLowerCase(), val) } ref={ ref(`order-${field.name.split(' ')[0].toLowerCase()}`) } placeholder="Select Field" data={ getField('order', field.name.split(' ')[0].toLowerCase(), field.type) } />
        </div>
      </div>
    </div>

    <hr />
    
    <div class="mb-3">
      <label class="form-label">
        Product Model
      </label>
      <eden-select on-change={ (e, val) => onProduct(val) } ref={ ref('product') } placeholder="Select Model" data={ getProduct() } />
    </div>
    
    <div class="mb-3" if={ props.page.get('data.product.model') }>
      <label class="form-label">
        Product Form
      </label>
      <eden-select on-change={ (e, val) => onProductForm(val) } ref={ ref('productForm') } placeholder="Select Form" data={ getProductForm() } />
    </div>
    
    <div class="card border bg-white" if={ props.page.get('data.product.form') }>
      <div class="card-header">
        Product Fields
      </div>
      <div class="card-body">
        <div class="mb-3" each={ (field, i) in productFields }>
          <label class="form-label">
            Product { field.name }
          </label>
          <eden-select on-change={ (e, val) => onField('product', field.name.toLowerCase(), val) } ref={ ref(`product-${field.name.toLowerCase()}`) } placeholder="Select Field" data={ getField('product', field.name.toLowerCase(), field.type) } />
        </div>
      </div>
    </div>

    <hr />

    <div class="mb-3">
      <label class="form-label">
        Discount Model (optional)
      </label>
      <!-- TODO move to @dashup calls -->
      <eden-select on-change={ (e, val) => onDiscount(val) } ref={ ref('discount') } placeholder="Select Discount Model" data={ getDiscount() } />
    </div>
    
    <div class="mb-3" if={ props.page.get('data.discount.model') }>
      <label class="form-label">
        Discount Form
      </label>
      <eden-select on-change={ (e, val) => onDiscountForm(val) } ref={ ref('discountForm') } placeholder="Select Form" data={ getDiscountForm() } />
    </div>
    
    <div class="card border bg-white" if={ props.page.get('data.discount.form') }>
      <div class="card-header">
        Discount Fields
      </div>
      <div class="card-body">
        <div class="mb-3" each={ (field, i) in discountFields }>
          <label class="form-label">
            Discount { field.name }
          </label>
          <eden-select on-change={ (e, val) => onField('discount', field.name.toLowerCase(), val) } ref={ ref(`discount-${field.name.toLowerCase()}`) } placeholder="Select Field" data={ getField('discount', field.name.toLowerCase(), field.type) } />
        </div>
      </div>
    </div>
  </div>

  <script>
    // export default
    export default class PageCheckoutConfig {
      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // product fields
        this.productFields = [{
          name : 'Field',
          type : 'product',
        }, {
          name : 'Image',
          type : 'image',
        }, {
          name : 'Title',
          type : 'text',
        }, {
          name : 'Description',
          type : ['textarea', 'wysiwyg'],
        }];

        // order fields
        this.orderFields = [{
          name : 'Email',
          type : 'email',
        }, {
          name : 'Address',
          type : 'address',
        }, {
          name : 'Field',
          type : 'order',
        }, {
          name : 'Total',
          type : 'money',
        }, {
          name : 'Products',
          type : 'model',
        }, {
          name : 'User',
          type : 'model',
        }, {
          name : 'Discount',
          type : 'money',
        }];

        // order fields
        this.discountFields = [{
          name : 'Code',
          type : 'text',
        }, {
          name : 'Uses',
          type : 'number',
        }, {
          name : 'Discount',
          type : 'discount',
        }];
      }

      /**
       * on mounted
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;
        
      }

      // AUTH EVENTS

      /**
       * on model
       */
      onAuth(val) {
        // get value
        if (!val) val = this.refs.auth.val();

        // model
        if (!val || !val.length) return;

        // set model
        this.props.data('auth', val);
      }

      // ORDER EVENTS

      /**
       * on model
       */
      onOrder(val) {
        // get value
        if (!val) val = this.refs.order.val();

        // model
        if (!val || !val.length) return;

        // set model
        this.props.data('order', {
          model : val,
        });
      }

      /**
       * on model
       */
      onOrderForm(val) {
        // get value
        if (!val) val = this.refs.orderForm.val();

        // model
        if (!val || !val.length) return;

        // get order
        const order = this.props.page.get('data.order') || {};
        order.form = val;
        
        // set model
        this.props.data('order', order);
      }

      // PRODUCT EVENTS

      /**
       * on model
       */
      onProduct(val) {
        // get value
        if (!val) val = this.refs.product.val();

        // model
        if (!val || !val.length) return;

        // get order
        const product = this.props.page.get('data.product') || {};
        product.model = val;
        
        // set model
        this.props.data('product', product);
      }

      /**
       * on model
       */
      onProductForm(val) {
        // get value
        if (!val) val = this.refs.productForm.val();

        // model
        if (!val || !val.length) return;

        // get order
        const product = this.props.page.get('data.product') || {};
        product.form = val;
        
        // set model
        this.props.data('product', product);
      }

      // DISCOUNT EVENTS

      /**
       * on model
       */
      onDiscount(val) {
        // get value
        if (!val) val = this.refs.discount.val();

        // model
        if (!val || !val.length) return;

        // get order
        const discount = this.props.page.get('data.discount') || {};
        discount.model = val;
        
        // set model
        this.props.data('discount', discount);
      }

      /**
       * on model
       */
      onDiscountForm(val) {
        // get value
        if (!val) val = this.refs.discountForm.val();

        // model
        if (!val || !val.length) return;

        // get order
        const discount = this.props.page.get('data.discount') || {};
        discount.form = val;
        
        // set model
        this.props.data('discount', discount);
      }

      /**
       * on model
       */
      async onField(base, type, val) {
        // get value
        if (!val) val = this.refs[`${base}-${type}`].val();

        // model
        if (!val || !val.length) return;

        // get val
        const baseVal = this.props.page.get(`data.${base}`) || {};
        baseVal[type] = val;
        
        // set model
        this.props.data(base, baseVal);
      }

      // AUTH VALUES

      /**
       * get value
       */
      getAuth() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'auth';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.auth') === page.get('_id'),
          };
        });
      }

      /**
       * gets all fields
       */
      getFields(form) {
        // reduce
        return [form].reduce((accum, id) => {
          // get page
          const page = this.props.dashup.page(id);

          // check page
          if (!page || !page.get('data.fields')) return accum;

          // loop fields
          accum.push(...page.get('data.fields'));

          // return accum
          return accum;
        }, []);
      }

      // ORDER VALUES

      /**
       * get value
       */
      getOrder() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.order.model') === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getOrderForm() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.page.get('data.order.model');
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.order.form') === page.get('_id'),
          };
        });
      }

      /**
       * get field
       */
      getField(base, name, type) {
        // return value
        return [...(this.getFields(this.props.page.get(`data.${base}.form`)))].filter((field) => type.includes(field.type)).map((field) => {
          // return value
          return {
            name     : field.label,
            value    : field.uuid,
            selected : this.props.page.get(`data.${base}.${name}`) === field.uuid,
          };
        });
      }

      // PRODUCT VALUES

      /**
       * get value
       */
      getProduct() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.product.model') === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getProductForm() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.page.get('data.product.model');
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.product.form') === page.get('_id'),
          };
        });
      }

      // DISCOUNT VALUES

      /**
       * get value
       */
      getDiscount() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.discount.model') === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getDiscountForm() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.page.get('data.discount.model');
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.discount.form') === page.get('_id'),
          };
        });
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-checkout-config>