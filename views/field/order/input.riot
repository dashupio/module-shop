<field-order-input>
  <div class="card mb-3">
    <div class="card-header border-bottom">
      { props.field.label }
      <a if={ !props.field.label } href="#!" onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
    </div>

    <div class="card-body">
      <!-- CHECKOUT -->
      <div class="mb-3">
        <label class="form-label">
          Checkout Module
        </label>
        <eden-select on-change={ (e, val) => onCheckout(val) } name={ props.getName(`${props.field.uuid}[checkout]`) } ref={ ref('checkout') } placeholder="Select Module" data={ getCheckout() } />
      </div>
      <!-- / CHECKOUT -->
      
      <!-- CART -->
      <div if={ value.checkout } class="card mb-3">
        <div class="card-header">
          Products
        </div>
        <div class="card-body">
          <div class="row" each={ (product, i) in value.products }>
            <div class="col-2">
              <img src={ getImage(product) } class="img-fluid" />
            </div>
            <div class="col-9 d-flex align-items-center">
              <div class="w-100">
                <p class="dashup-item-title m-0">
                  <b>{ getName(product) }</b>
                </p>
                <p class="dashup-item-price m-0">
                  <b>{ product.count.toLocaleString() }</b>
                  <span class="mx-2">-</span>
                  ${ getPrice(product).toFixed(2) }
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- / CART -->

      <!-- PAYMENT -->
      <div class="card mb-3" if={ value.checkout }>
        <div class="card-header">
          Payments
        </div>

        <div class="card-body" each={ (payment, i) in value.payments }>
          <div class="mb-3">
            <label class="form-label">
              { props.field.label } Payment Total
            </label>
            <div class="input-group">
              <div class="input-group-prepend">
                <div class="input-group-text">
                  $
                </div>
              </div>
              <input type="number" ref={ ref('type') } class="form-control" step="0.01" readonly placeholder={ `${ props.field.label } Payment Total` } value={ payment.amount[0] || 0 } name={ props.getName(`${props.field.uuid}[payments][${i}][total]`) } />
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">
              { props.field.label } Payment Type
            </label>
            <eden-select ref={ ref('type') } placeholder={ `${ props.field.label } Payment Type` } data={ getType(payment) } on-change={ (e, val) => onType(val) } name={ props.getName(`${props.field.uuid}[payments][${i}][type]`) } />
          </div>
          <div class="mb-3">
            <label class="form-label">
              { props.field.label } Payment Status
            </label>
            { console.log(payment) }
            <eden-select ref={ ref('status') } placeholder={ `${ props.field.label } Payment Status` } data={ getStatus(payment) } on-change={ (e, val) => onStatus(val) } name={ props.getName(`${props.field.uuid}[payments][${i}][status]`) } />
          </div>

          <dashup-view dashup={ props.dashup } type="connect" struct={ payment.type } view="view" payment={ payment } />
        </div>

      </div>
    </div>

  </div>
  
  <script>
    // dotprop
    import dotProp from 'dot-prop';
  
    // export default
    export default class FieldOrderInput {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount() {
        // set initial value
        this.value = this.props.value || {};

        // bind methods
        this.onChange = this.onChange.bind(this);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on type
       */
      onType(val) {
        // payment
        if (!this.value.payment) this.value.payment = {};

        // set value
        this.value.payment.type = val;

        // update
        this.update();
        this.onChange();
      }

      /**
       * on type
       */
      onStatus(val) {
        // payment
        if (!this.value.payment) this.value.payment = {};

        // set value
        this.value.payment.status = val;

        // update
        this.update();
        this.onChange();
      }

      /**
       * on type
       */
      onEmail(e) {
        // payment
        if (!this.value.information) this.value.information = {};

        // set value
        this.value.information.email = e.target.value;

        // update
        this.update();
        this.onChange();
      }

      /**
       * on type
       */
      onCheckout(val) {
        // get value
        if (!val) val = this.refs.checkout.val();

        // model
        if (!val || !val.length) return;

        // set field checkout
        this.value.checkout = val;

        // update
        this.update();
        this.onChange();
      }

      /**
       * on change
       */
      onChange() {
        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get props
       */
      getProps(field, type) {
        // get parent
        const actual = this.props.getProps(field);

        // get name
        actual.getName = (name) => this.getFieldName(name, type);

        // return actual
        return actual;
      }

      /**
       * get field
       */
      getField(name, tld = 'product') {
        // get form
        const checkout = this.value.checkout;

        // check checkout
        if (!checkout) return;

        // check form
        const checkoutPage = this.props.dashup.page(checkout);

        // check checkout
        if (!checkoutPage) return;

        // get form
        const form = checkoutPage.get(`data.${tld}.form`);

        // check checkout
        if (!form) return;

        // check form
        const formPage = this.props.dashup.page(form);

        // check checkout
        if (!formPage) return;

        // return form
        return (formPage.get('data.fields') || []).find((f) => f.uuid === checkoutPage.get(`data.${tld}.${name}`));
      }

      /**
       * get name
       */
      getFieldName(name, type) {
        // check split
        const split = name.split('[');

        // return name
        if (split.length > 1) {
          // 
          return `${this.props.field.uuid}[${type}][${split.shift()}][${split.join('[')}`;
        }

        // return name
        return `${this.props.field.uuid}[${type}][${name}]`;
      }

      /**
       * get image
       */
      getImage(product) {
        // get field
        const field = this.getField('image');

        // check field
        if (!field) return;

        // image
        return dotProp.get(product.product, `${field.name || field.uuid}.0.thumbs.sm-sq.url`);
      }

      /**
       * get image
       */
      getName(product) {
        // get field
        const field = this.getField('title');

        console.log(field, 'test');

        // check field
        if (!field) return;

        // image
        return dotProp.get(product.product, `${field.name || field.uuid}`);
      }

      /**
       * get image
       */
      getPrice(product) {
        // get field
        const field = this.getField('field');

        // check field
        if (!field) return 0;

        // image
        return parseFloat(dotProp.get(product.product, `${field.name || field.uuid}.price`) || 0);
      }

      /**
       * get value
       */
      getType(payment) {
        // get form
        const checkout = this.value.checkout;

        // check checkout
        if (!checkout) return [];

        // check form
        const checkoutPage = this.props.dashup.page(checkout);

        // check checkout
        if (!checkoutPage) return [];

        // get connects
        const connects = checkoutPage.get('connects') || [];

        // return
        return connects.map((connect) => {
          // return value
          return {
            name     : connect.type,
            value    : connect.uuid,
            selected : connect.uuid === payment.uuid,
          };
        });
      }

      /**
       * get value
       */
      getStatus(payment) {
        // return value
        const types = [['pending', 'Pending'], ['declined', 'Declined'], ['succeeded', 'Succeeded']];

        // return mapped types
        return types.map((item) => {
          // return value
          return {
            name     : item[1],
            value    : item[0],
            selected : (payment || {}).status === item[0],
          };
        });
      }

      /**
       * get contact
       */
      getEmail() {
        // return email value
        return (this.value.information || {}).email || '';
      }

      /**
       * get value
       */
      getCheckout() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'checkout';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.value.checkout === page.get('_id'),
          };
        });
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }
      
      /**
       * set classes
       */
      classes(obj = {}) {
        // return classes
        return Object.keys(obj).filter((key) => !!obj[key]).join(' ');
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
    
  </script>
</field-order-input>