<field-address>
  <div class={ getClass('checkoutBilling', `field-${props.name}`) }>
    <label class={ getClass('checkoutContactTitle', 'text-large') }>
      { props.label }
    </label>
    <div class="row form-group">
      <div class="col-6">
        <input class="form-control" placeholder="First Name" ref="first" type="text" onchange={ (e) => onValue(e, 'first') } />
      </div>
      <div class="col-6">
        <input class="form-control" placeholder="Last Name" ref="last" type="text" onchange={ (e) => onValue(e, 'last') } />
      </div>
    </div>
    <div class="mb-3">
      <div class="dropdown">
        <input class="form-control dropdown-toggle" placeholder="Address" type="text" ref="address" onkeyup={ (e) => onKeyup(e) } onchange={ (e) => onValue(e, 'street') } />

        <div class={ `${getClass('checkoutAddressDropdown', 'dropdown-menu w-100')} ${state.open ? 'show' : ''}` }>
          <a if={ state.searching } class="dropdown-item disabled" href="#">
            Searching...
          </a>
          <a if={ state.results } each={ (result, i) in state.results } class="dropdown-item" href="#!" onclick={ (e) => onAddress(e, result) }>
            { result.formatted }
          </a>
        </div>
      </div>
    </div>
    <div class="mb-3">
      <input class="form-control" placeholder="Apartment, Suite, etc" type="text" ref="suite" onchange={ (e) => onValue(e, 'suite') } />
    </div>
    <div class="mb-3">
      <input class="form-control" placeholder="City" value={ state.address.city || '' } ref="city" onchange={ (e) => onValue(e, 'city') } type="text" />
    </div>
    <div class="row form-group">
      <div class="col-4">
        <input class="form-control" placeholder="Country" value={ state.address.country || '' } ref="country" onchange={ (e) => onValue(e, 'country') }  type="text" />
      </div>
      <div class="col-4">
        <input class="form-control" placeholder="State" value={ state.address.state || '' } ref="state" onchange={ (e) => onValue(e, 'state') }  type="text" />
      </div>
      <div class="col-4">
        <input class="form-control" placeholder="Postcode" value={ state.address.postcode || '' } ref="postcode" onchange={ (e) => onValue(e, 'postcode') } type="text" />
      </div>
    </div>
    <div class="mb-3">
      <input class="form-control" placeholder="Phone" type="text" ref="phone" onchange={ (e) => onValue(e, 'phone') } />
    </div>
  </div>

  <script>
    // import
    import dotProp from 'dot-prop';

		// export default
    export default {
      components : {
      },

      onBeforeMount(props, state) {
        // initial state
        this.state = {
          address : props.address || {},
        };
        this.dashup = props.dashup;

        // handle click
        this.handleClick = (event) => {
          // check target
          if (!this.$('.dropdown').contains(event.target)) {
            // remove listener
            document.removeEventListener('click', this.handleClick);

            // address
            const address = this.state.billing;
            address.open = false;

            // close address
            this.update({
              address,
            });
          }
        };
      },

      onUpdated() {
        // check hash
        const hash = JSON.stringify(this.state.address);

        // check state
        if (this.props.onChange && hash !== this.hash) {
          // set hash
          this.hash = hash;

          // on change
          this.props.onChange(this.state.address);
        }
      },

      async onKeyup(e) {
        // address open
        const address = e.target.value || '';

        // check
        if (this.state.address.number && address.length <= 4) {
          // return on empty
          return this.update({
            open      : false,
            address   : {},
            results   : [],
            searching : false,
          });
        }
        if (this.state.address.street) return;

        // check open
        if (!this.state.open && address.length > 4) {
          // add listener
          document.addEventListener('click', this.handleClick);
        }

        // set open
        this.update({
          open      : address.length > 4,
          searching : true,
        });

        // check length
        if (address.length > 4) {
          // search
          const results = await this.dashup.call('address', {
            address,
          });

          // update view
          this.update({
            open      : this.state.open,
            results   : results,
            searching : false,
          });
        }
      },

      onAddress(e, address) {
        // prevent
        e.preventDefault();
        e.stopPropagation();
      
        // add listener
        document.removeEventListener('click', this.handleClick);

        // update address
        this.$('[ref="address"]').value = address.street;
        this.update({
          open : false,
          address,
        });
      },

      onValue(e, key) {
        // get address
        const address = this.state.address || {};

        // update all
        ['address', 'suite', 'city', 'country', 'state', 'postcode', 'phone', 'first', 'last'].forEach((k) => {
          // set value
          address[k === 'address' ? 'street' : k] = this.$(`[ref="${k}"]`).value;
        });

        // update
        this.update({
          address,
        });
      },

      getClass(name, def) {
        // get classes
        const classes = this.props.classes || {};

        // check name
        if (!classes[name]) return def;

        // return props
        return classes[name];
      },
    }
  </script>
</field-address>