<field-discount-input>
  <div class="mb-3">
    <label class="form-label" for={ props.getId(props.field.uuid) }>
      { props.field.label }
      <a href="#!" if={ !props.field.label } onclick={ (e) => props.updateAction(e, props.field) }>
        <i>Set Label</i>
      </a>
    </label>
    <div class="input-group">
      <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false">
        { value.type === 'amount' ? 'Amount ($)' : 'Percentage (%)' }
      </button>
      <ul class="dropdown-menu">
        <li>
          <a class="dropdown-item" href="#!" onclick={ (e) => onType(e, 'amount') }>Amount ($)</a>
        </li>
        <li>
          <a class="dropdown-item" href="#" onclick={ (e) => onType(e, 'percent') }>Percentage (%)</a>
        </li>
      </ul>
      <input class="d-none" type="hidden" name={ props.getName(`${props.field.uuid}[type]`) } value={ value.type } />
      <span class="input-group-text" if={ value.type === 'amount' }>
        $
      </span>
      <input type="number" class="form-control" name={ props.getName(`${props.field.uuid}[value]`) } value={ value.value } step="0.01" placeholder={ props.field.label }>
      <span class="input-group-text" if={ value.type === 'percent' }>
        %
      </span>
    </div>
  </div>
  
  <script>
    // export default
    export default class FieldDiscountInput {
      /**
       * on before mount
       */
      onBeforeMount() {
        // on change
        this.onChange = this.onChange.bind(this);
    
        // set initial value
        this.value = this.props.value || {};

        // check type
        if (!this.value.type) this.value.type = 'amount';
      }

      /**
       * on type
       */
      onType(e, type) {
        // set type
        this.value.type = type;

        // update
        this.update();
      }

      /**
      * on change
      *
      * @param {Event} e
      */
      onChange(e) {
        // set value
        this.value = this.val();

        // check form
        if (this.props.form) {
          // update
          this.props.dataAction(this.props.field, this.value);
        }
      }
    
      /**
      * return value
      *
      * @return {*}
      */
      val() {
        // return non accumulated value
        return {
          type  : this.value.type || 'amount',
          value : parseFloat(this.$('.form-control').value),
        };
      }
    }
    
  </script>
</field-discount-input>
