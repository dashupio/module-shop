<order>
  <div class={ getClass('order', 'dashup-order row') }>
    
    <div class={ getClass('orderMain', 'dashup-order-main col-7') }>

      <div class={ getClass('orderLogo', 'dashup-order-logo text-center') } if={ props.logo }>
        <img src={ props.logo } class={ getClass('orderLogoImg', 'w-25 margin-auto') } />
      </div>
    
      <div class={ getClass('orderId', 'dashup-order-id text-center mt-3 mb-5') }>
        <span class="text-bold">
          Order #{ state.order ? state.order.get('_id') : 'Loading...' }
        </span>
      </div>

      <div if={ state.items && state.items.length }>
        <div class="card">
          <div each={ (item, i) in state.items } class="card-header">
            <div class="row">
              <div class="col-5">
                <b>
                  <small>
                    { item.key }
                  </small>
                </b>
              </div>
              <div class="col-7">
                <small class="text-overflow">
                  { item.value }
                </small>
              </div>
            </div>
          </div>
        </div>

        <hr />
      </div>
      
      <div if={ getOrder('field.payments') }>

        <order-payment each={ (payment, i) in getOrder('field.payments') } payment={ payment } { ...props } />

      </div>
    </div>
    
    <div class={ getClass('orderSidebar', 'dashup-order-cart col-5') }>

      <!-- CART -->
      <div if={ state.ready } each={ (product, i) in getOrder('field.products', []) } class={ getClass('cartItem', 'dashup-cart-item row mb-3') }>
        <div class={ getClass('cartItemImage', 'col-4') } if={ getProduct(product, 'image.thumbs.0.2x-sq.url') }>
          <img src={ getProduct(product, 'image.thumbs.0.2x-sq.url') } class={ getClass('cartItemImageImg', 'img-fluid') } />
        </div>
        <div class={ getClass('cartItemInfo', 'col d-flex align-items-center') }>
          <div class="w-100">
            <p class={ getClass('cartItemTitle', 'dashup-item-title') }>
              <small>
                { product.count.toLocaleString() }
                <i class={ getClass('cartItemPriceSep', 'fal fa-times mx-1') } />
              </small>
              <b>{ getProduct(product, 'title') }</b>
            </p>
            <p class={ getClass('cartItemPrice', 'dashup-item-price') }>
              <b>
                ${ (getProduct(product, 'field.price') * product.count).toFixed(2) }
              </b>
              <small if={ getProduct(product, 'field.type') === 'subscription' } class={ getClass('cartItemPeriod', 'dashup-item-period ml-2') }>
                { getProduct(product, 'field.period') || 'Monthly' }
              </small>
            </p>
          </div>
        </div>
      </div>
      <!-- / CART -->

      <hr />

      <!-- SUB TOTAL -->
      <div class={ getClass('orderSubtotal', 'dashup-subtotal') } if={ state.ready }>
        <div each={ entry in Object.entries(checkout.totals(getOrder('field.products', []))) } class={ getClass('checkoutSubtotalLine', 'row mb-2') }>
          <div class={ getClass('checkoutSubtotalLabel', 'col-8') }>
            { `${entry[0].charAt(0).toUpperCase()}${entry[0].slice(1)}` }
          </div>
          <div class={ getClass('checkoutSubtotalAmount', 'col-4 text-right')}>
            <b>${ entry[1].toFixed(2) }</b>
          </div>
        </div>
        <div class={ getClass('orderSubtotalLine', 'row mb-2') } if={ getDiscount() }>
          <div class={ getClass('orderSubtotalLabel', 'col-8') }>
            Discount
          </div>
          <div class={ getClass('orderSubtotalAmount', 'col-4 text-right')}>
            <b>${ getDiscount().toFixed(2) }</b>
          </div>
        </div>
        <div class={ getClass('orderSubtotalLine', 'row mb-2') } if={ checkout.get('data.order.shipping') }>
          <div class={ getClass('orderSubtotalLabel', 'col-8') }>
            Shipping
          </div>
          <div class={ getClass('orderSubtotalAmount', 'col-4 text-right')}>
            <b if={ checkout.shipping() }>${ checkout.shipping().toFixed(2) }</b>
            <i if={ !checkout.shipping() }>N/A</i>
          </div>
        </div>
      </div>
      <!-- / SUB TOTAL -->

      <hr />

      <!-- TOTAL -->
      <div class={ getClass('orderTotal', 'dashup-total') }>
        <div class={ getClass('orderTotalLine', 'row mb-2') }>
          <div class={ getClass('orderTotalLabel', 'col-8 d-flex align-items-center') }>
            Total
          </div>
          <div class={ getClass('orderTotalAmount', 'col-4 text-right h4')}>
            ${ ((checkout.total(getOrder('field.products', [])) + getShipping()) - getDiscount()).toFixed(2) }
          </div>
        </div>
      </div>
      <!-- / TOTAL -->

    </div>
  </div>

  <script>
    // import
    import dotProp from 'dot-prop';

    // checkout payment
    import orderPayment from './order/payment';

		// export default
    export default class Order {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * return components
       */
      static get components() {
        // return components
        return {
          orderPayment,
        };
      }

      /**
       * on before mount,
       */
      onBeforeMount(props, state) {
        // initial state
        this.state = {
          order : null,
					ready : false,
        };

        // bind methods
        this.getOrder = this.getOrder.bind(this);

        // set dashup
        this.auth = props.page.get('data.auth') ? props.dashup.page(props.page.get('data.auth')) : null;
        this.order = props.dashup.page(props.page.get('data.order.form'));
        this.dashup = props.dashup;
        this.checkout = props.page;

        // safe update
        this.safeUpdate = () => {
          this.update();
        };
      }

      /**
       * on mounted
       */
      async onMounted(props, state) {
        // add listener
        if (!props.order) return;
      
        // check order
        const order = await this.order.listenById(props.order);

        // safe update
        order.on('update', this.safeUpdate);

        // fields
        const orderField = this.checkout.field('order', 'field');
        const productField = this.checkout.field('product', 'field');

        // items
        const items = [{
          key   : 'Contact',
          value : order.get(`${orderField.name || orderField.uuid}.information.email`),
        }];

        // shipping
        const billing = order.get(`${orderField.name || orderField.uuid}.information.address`);

        // shipping
        if (billing && billing.first) {
          items.push({
            key   : 'Bill to',
            value : `${billing.first || ''} ${billing.last || ''}`,
          }, {
            key   : '',
            value : `
              ${billing.street ? `${billing.street},` : ''}
              ${billing.city ? `${billing.city}` : ''}
              ${billing.postcode ? `${billing.postcode},` : ''}
              ${billing.country ? `${billing.country}` : ''}`,
          });
        }

        // shipping
        const shipping = order.get(`${orderField.name || orderField.uuid}.shipping.address`);

        // shipping
        if (shipping && Object.keys(shipping).length) {
          items.push({
            key   : 'Ship to',
            value : `${shipping.first || ''} ${shipping.last || ''}`,
          }, {
            key   : '',
            value : `
              ${shipping.street ? `${shipping.street},` : ''}
              ${shipping.city ? `${shipping.city}` : ''}
              ${shipping.postcode ? `${shipping.postcode},` : ''}
              ${shipping.country ? `${shipping.country}` : ''}`,
          });
        }

        // update
        this.update({
          order,
          items,
          ready : true,
        });
      }
      
      /**
       * on before unmount
       */
      onBeforeUnmount(props, state) {
        // safe update
        if (this.state.order) this.state.order.removeListener('update', this.safeUpdate);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get class
       */
      getClass(name, def) {
        // get classes
        const classes = this.props.classes || {};

        // check name
        if (!classes[name]) return def;

        // return props
        return classes[name];
      }

      /**
       * get discount
       */
      getDiscount(total) {
        // order
        const order = this.state.order;

        // check order
        if (!order) return 0;

        // get discount
        const discount = this.getOrder('field.discount', null);

        // check order
        if (!discount) return 0;

        // total
        if (!total) total = this.checkout.total(this.getOrder('field.products', []));

        // parse
        total = parseFloat(total);

        // check value
        if (!discount.type || discount.type === 'amount') {
          // return discount
          return parseFloat(discount.value || '0');
        } else if (discount.type === 'percent') {
          // return discount
          return (parseFloat(discount.value || '0') / 100) * total;
        }

        // get discount
        return 0;
      }

      /**
       * get shipping
       */
      getShipping() {
        // return total
        return 0;
      }

      /**
       * get product field
       */
      getOrder(key, d) {
        // order
        const order = this.state.order;

        // check order
        if (!order) return;

        // product field
        const orderField = this.checkout.field('order', key.split('.')[0]) || {};

        // return
        return dotProp.get(order.get(), `${orderField.name || orderField.uuid}${key.split('.').length > 1 ? `.${key.split('.').slice(1).join('.')}` : ''}`) || d;
      }

      /**
       * get product field
       */
      getProduct(product, key, d) {
        // product field
        const productField = this.checkout.field('product', key.split('.')[0]) || {};

        // return
        return dotProp.get(product.product, `${productField.name || productField.uuid}${key.split('.').length > 1 ? `.${key.split('.').slice(1).join('.')}` : ''}`) || d;
      }
    }

  </script>
</order>