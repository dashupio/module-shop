<checkout>
  <div class={ getClass('checkout', 'dashup-checkout row') }>
    
    <div class={ getClass('checkoutMain', 'dashup-checkout-main col-7') }>

      <div class={ getClass('checkoutLogo', 'dashup-checkout-logo text-center') } if={ props.logo }>
        <img src={ props.logo } class={ getClass('checkoutLogoImg', 'w-25 margin-auto') } />
      </div>
    
      <div class={ getClass('checkoutSteps', 'dashup-checkout-logo text-center mt-3 mb-5') }>
        <span each={ (step, i) in steps } class={ state.step === step.toLowerCase() ? 'text-bold' : '' }>
          { step }
          { i < steps.length - 1 ? ' > ' : '' }
        </span>
      </div>

      <div if={ state.items && state.items.length }>
        <div class="card">
          <div each={ (item, i) in state.items } class="card-header">
            <div class="row">
              <div class="col-5">
                <b>
                  <small>
                    { item.key }
                  </small>
                </b>
              </div>
              <div class="col-7">
                <small class="text-overflow">
                  { JSON.stringify(item.value) }
                </small>
              </div>
            </div>
          </div>
        </div>

        <hr />
      </div>
    
      <!-- STEPS -->

      <!-- INFORMATION -->
      <div if={ state.step === 'information' }>

        <!-- ACCOUNT -->
        <div class={ getClass('checkoutContact', 'dashup-contact') }>
          <label class={ getClass('checkoutContactTitle', 'text-large form-label') }>
            Contact
            <a href="#!" class={ getClass('checkoutContactExtra', 'ml-auto') } if={ !props.email && auth && auth.exists() } onclick={ (e) => toggleLogin() }>
              Login or Register
            </a>
          </label>

          <input class={ getClass('checkoutInput', 'form-control') } placeholder="Email" value={ state.email || props.email || (auth && auth.exists() ? auth.user.get(checkout.field('auth', 'email').name || checkout.field('auth', 'email').uuid) : '') } readonly={ (auth && auth.exists()) || props.email } type="email" onchange={ (e) => onEmail(e) } />

        </div>
        <!-- / ACCOUNT -->

        <hr />

        <!-- BILLING -->
        <field-address if={ checkout.get('data.order.billing') } label="Billing Address" on-change={ (address) => onBillingAddress(address) } { ...props } />
        <!-- / BILLING -->

        <hr if={ checkout.get('data.order.billing') } />
      </div>
      <!-- / INFORMATION -->

      <!-- SHIPPING -->
      <div if={ state.step === 'shipping' && checkout.get('data.order.shipping') }>
        <div class="form-check mr-sm-2">
          <input type="checkbox" class="form-check" id="shipping-is-billing" onchange={ (e) => onShippingCheck(e) } { ...getIsBilling() }>
          <label class="form-check-label" for="shipping-is-billing">
            Shipping Address same as Billing
          </label>
        </div>
        
        <hr if={ !getIsBilling().checked } />

        <field-address label="Shipping Address" if={ !getIsBilling().checked } on-change={ (address) => onShippingAddress(address) } { ...props } />
        
        <hr if={ !getIsBilling().checked && Object.keys(state.shipping).length } />

        <div class="card my-4" if={ getIsBilling().checked || Object.keys(state.shipping).length }>
          <div class="card-header">
            Shipping to
          </div>
          <div class="card-body">
            { getShipping().street ? `${getShipping().street},` : '' }
            { getShipping().city ? `${getShipping().city}` : '' }
            { getShipping().postcode ? `${getShipping().postcode},` : '' }
            { getShipping().country ? `${getShipping().country}` : '' }
          </div>
        </div>
      </div>
      <!-- / SHIPPING -->

      <!-- PAYMENT -->
      <div if={ state.step === 'payment' }>
        <div class="card mb-3">
          <div each={ (source, i) in props.page.get('connects') }>
            <div class="card-header">
              <div class="form-check">
                <input type="radio" id={ source.uuid } name="payment-type" class="form-check-input" checked />
                <label class="form-check-label" for={ source.uuid }>
                  { source.type }
                </label>
              </div>
            </div>
            <checkout-payment if={ state.source === source.uuid } class="d-block card-body" connect={ source } billing={ state.billing } enable={ (a, b) => onEnablePayment(a, b) } disable={ () => onDisablePayment() } { ...props } />
          </div>
        </div>
      </div>
      <!-- / PAYMENT -->

      <!-- COMPLETE -->
      <div class={ getClass('checkoutComplete', 'dashup-checkout-complete row') }>
        <div class={ getClass('checkoutCompleteBack', 'col-6') }>
          <button class={ getClass('checkoutCompleteBtn', 'btn btn-link pl-0 btn-lg') } onclick={ (e) => onBack(e) } if={ steps.map(s => s.toLowerCase()).indexOf(state.step) > 1 }>
            Back
          </button>
          <a href={ props.back } if={ props.back && steps.map(s => s.toLowerCase()).indexOf(state.step) === 1 } class={ getClass('checkoutCompleteBtn', 'btn btn-link pl-0 btn-lg') }>
            Back
          </a>
        </div>
        <div class={ getClass('checkoutCompleteBtnWrap', 'col-6 text-right') }>
          <button if={ state.step !== 'payment' } class={ getClass('checkoutCompleteBtn', 'btn btn-dark btn-lg') } onclick={ (e) => continueAction(e) }>
            Continue
          </button>

          <button if={ state.step === 'payment' } class={ `${getClass('checkoutCompleteBtn', 'btn btn-success btn-lg')} ${enabled.payment && !state.checkout ? '' : 'disabled'}` } onclick={ (e) => completeAction(e) }>
            { state.checkout ? 'Completing...' : 'Complete Order' }
          </button>
        </div>
      </div>
      <!-- / COMPLETE -->

      <!-- / STEPS -->
    </div>
    
    <div class={ getClass('checkoutSidebar', 'dashup-checkout-cart col-5') }>

      <!-- CART -->
      <div each={ (product, i) in cart.get('products') } class={ getClass('cartItem', 'dashup-cart-item row mb-3') }>
        <div class={ getClass('cartItemImage', 'col-4') } if={ getProduct(product, 'image.thumbs.0.2x-sq.url') }>
          <img src={ getProduct(product, 'image.thumbs.0.2x-sq.url') } class={ getClass('cartItemImageImg', 'img-fluid') } />
        </div>
        <div class={ getClass('cartItemInfo', 'col d-flex align-items-center') }>
          <div class="w-100">
            <p class={ getClass('cartItemTitle', 'dashup-item-title') }>
              <small>
                { product.count.toLocaleString() }
                <i class={ getClass('cartItemPriceSep', 'fal fa-times mx-1') } />
              </small>
              <b>{ getProduct(product, 'title') }</b>
            </p>
            <p class={ getClass('cartItemPrice', 'dashup-item-price') }>
              <b>
                ${ (getProduct(product, 'field.price') * product.count).toFixed(2) }
              </b>
              <small if={ getProduct(product, 'field.type') === 'subscription' } class={ getClass('cartItemPeriod', 'dashup-item-period ml-2') }>
                { getProduct(product, 'field.period') || 'Monthly' }
              </small>
            </p>
          </div>
        </div>
      </div>
      <!-- / CART -->

      <hr />

      <!-- DISCOUNT -->
      <div if={ props.page.get('data.discount.model') } class={ getClass('checkoutDiscount', 'dashup-discount d-flex flex-row') }>
        <div class={ getClass('checkoutDiscountInputWrap', 'flex-1') }>
          <input class={ getClass('checkoutDiscountInput', 'form-control') } ref="discount" placeholder="Discount code" />
        </div>
        <div class={ getClass('checkoutDiscountBtnWrap', 'flex-0 ml-3') }>
          <button class={ `${getClass('checkoutButton', 'btn btn-block btn-dark')}${loading('discount') ? ' disabled' : ''}` } onclick={ (e) => onDiscount(e) }>
            { loading('discount') ? 'Applying...' : 'Apply' }
          </button>
        </div>
      </div>
      <div if={ cart.get('discount') } class="mt-2 d-flex align-items-center">
        <b class="mr-2">
          { getDiscount('code') }
        </b>
        { getDiscount('discount.type', 'amount') === 'amount' ? '$' : '' }{ parseFloat(getDiscount('discount.value')).toFixed(2) }{ getDiscount('discount.type', 'amount') === 'amount' ? '' : '%' }
        Off
        <button class={ `btn btn-sm btn-secondary ml-auto${loading('discount') ? ' disabled' : ''}` } onclick={ (e) => onDiscountRemove(e) }>
          <i class={ loading('discount') ? 'fa fa-spinner fa-spin' : 'fa fa-times' } />
        </button>
      </div>
      <!-- / DISCOUNT -->

      <hr if={ props.page.get('data.discount.model') } />

      <!-- SUB TOTAL -->
      <div class={ getClass('checkoutSubtotal', 'dashup-subtotal') }>
        <div each={ entry in Object.entries(checkout.totals()) } class={ getClass('checkoutSubtotalLine', 'row mb-2') }>
          <div class={ getClass('checkoutSubtotalLabel', 'col-8') }>
            { `${entry[0].charAt(0).toUpperCase()}${entry[0].slice(1)}` }
          </div>
          <div class={ getClass('checkoutSubtotalAmount', 'col-4 text-right')}>
            <b>${ entry[1].toFixed(2) }</b>
          </div>
        </div>
        <div class={ getClass('checkoutSubtotalLine', 'row mb-2') } if={ checkout.discount(checkout.total()) }>
          <div class={ getClass('checkoutSubtotalLabel', 'col-8') }>
            Discount
          </div>
          <div class={ getClass('checkoutSubtotalAmount', 'col-4 text-right')}>
            <b>${ checkout.discount().toFixed(2) }</b>
          </div>
        </div>
        <div class={ getClass('checkoutSubtotalLine', 'row mb-2') } if={ checkout.get('data.order.shipping') }>
          <div class={ getClass('checkoutSubtotalLabel', 'col-8') }>
            Shipping
          </div>
          <div class={ getClass('checkoutSubtotalAmount', 'col-4 text-right')}>
            <b if={ checkout.shipping() }>${ checkout.shipping().toFixed(2) }</b>
            <i if={ !checkout.shipping() }>N/A</i>
          </div>
        </div>
      </div>
      <!-- / SUB TOTAL -->

      <hr />

      <!-- TOTAL -->
      <div class={ getClass('checkoutTotal', 'dashup-total') }>
        <div class={ getClass('checkoutTotalLine', 'row mb-2') }>
          <div class={ getClass('checkoutTotalLabel', 'col-8 d-flex align-items-center') }>
            Total
          </div>
          <div class={ getClass('checkoutTotalAmount', 'col-4 text-right h4')}>
            ${ ((checkout.total() + checkout.shipping()) - checkout.discount(checkout.total())).toFixed(2) }
          </div>
        </div>
      </div>
      <!-- / TOTAL -->

    </div>
  </div>

  <script>
    // import
    import dotProp from 'dot-prop';

    // checkout payment
    import checkoutPayment from './checkout/payment';

		// export default
    export default class Checkout {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////
      
      /**
       * get components
       */
      static get components() {
        // return components
        return {
          checkoutPayment,
        };
      }

      /**
       * on before mount
       */
      onBeforeMount(props, state) {
        // initial state
        this.state = {
          step    : 'information',
          ready   : false,
          source  : ((props.page.get('connects') || [])[0] || {}).uuid,
          billing : {},
          payment : {},
        };
        this.enabled = {
          payment : false,
        };

        // bind methods
        this.completeAction = this.completeAction.bind(this);
        this.continueAction = this.continueAction.bind(this);

        // bind event methods
        this.onEnablePayment = this.onEnablePayment.bind(this);

        // set dashup
        this.auth     = props.page.get('data.auth') ? props.dashup.page(props.page.get('data.auth')) : null;
        this.cart     = props.page.cart;
        this.order    = props.dashup.page(props.page.get('data.order.form'));
        this.product  = props.dashup.page(props.page.get('data.product.form'));

        // props
        this.dashup   = props.dashup;
        this.checkout = props.page;

        // set steps
        this.steps = this.checkout.get('data.order.shipping') ? ['Cart', 'Information', 'Shipping', 'Payment'] : ['Cart', 'Information', 'Payment'];

        // safe update
        this.safeUpdate = () => {
          this.update();
        };
      }

      /**
       * on mounted
       */
      onMounted(props, state) {
        // add listener
        props.page.on('cart', this.safeUpdate);
      }

      /**
       * on before unmount
       */
      onBeforeUnmount(props, state) {
        // add listener
        props.page.removeListener('cart', this.safeUpdate);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // ACTION METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * continue action
       */
      continueAction(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();
        
        // get current
        const current = this.steps[this.steps.map(s => s.toLowerCase()).indexOf(this.state.step)];

        // do step check
        if (this[`on${current}`] && !this[`on${current}`]()) return;

        // set state
        this.update({
          step : this.steps[this.steps.map(s => s.toLowerCase()).indexOf(this.state.step) + 1].toLowerCase(),
        });
      }

      /**
       * payment pay
       */
      async completeAction(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // check checkout
        if (this.state.checkout) return;

        // create checkout
        this.update({
          checkout : true,
        });
        
        // create object
        const products = this.checkout.cart.get('products').map(({ product, opts, count }) => {
          // return products
          return {
            opts,
            count,
            product : product.get('_id'),
          };
        });

        // billing/shipping
        const information = {
          email   : this.props.email || this.state.email || (this.auth && this.auth.exists() ? this.auth.user.get(this.checkout.field('auth', 'email').name || this.checkout.field('auth', 'email').uuid) : ''),
          address : this.state.billing,
        };
        const shipping = {
          address : this.getShipping(),
        };

        // discount
        const discount = this.checkout.cart.get('discount') ? this.checkout.cart.get('discount').get('_id') : null;

        // payment
        const payment = this.state.payment;

        // await call
        const done = await this.props.dashup.rpc({
          page   : this.checkout.get('_id'),
          dashup : this.dashup.get('_id'),
        }, 'checkout.complete', {
          payment,
          products,
          discount,
          shipping,
          information,
        });

        // create checkout
        this.update({
          checkout : false,
        });

        // check done
        if (done._id) {
          // done
          if (this.props.onSuccess) this.props.onSuccess(new this.dashup.Model(done, this.dashup));

          // clear cart
          this.checkout.cart.set(`products`, []);
          this.checkout.emit('cart', this.checkout.cart);
        } else {
          // on error
          if (this.props.onError) this.props.onerror(done);
        }
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on discount
       */
      async onDiscount(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // product field
        const discountCodeField = this.checkout.field('discount', 'code') || {};
        const discountUsesField = this.checkout.field('discount', 'uses') || {};

        // loading discount
        this.loading('discount', true);

        // get code
        const code = this.$('[ref="discount"]').value;

        // check code
        if (!(code || '').length) return;

        // check code
        let discount = this.props.dashup.page(this.checkout.get('data.discount.form')).where({
          [discountCodeField.name || discountCodeField.uuid] : code,
        });

        // uses
        if (discountUsesField) {
          discount = discount.gt(discountUsesField.name || discountUsesField.uuid, 0);
        }

        // find one
        discount = await discount.findOne();

        // set discount
        if (!discount) {
          // discount
          this.update({
            discount : 'Code not found',
          });

          // return
          return this.loading('discount', false);
        }

        // set discount
        await this.checkout.code(discount);

        // loading discount
        this.loading('discount', false);
      }

      /**
       * on discount remove
       */
      async onDiscountRemove(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // loading discount
        this.loading('discount', true);

        // set discount
        await this.checkout.code(null);

        // loading discount
        this.loading('discount', false);
      }

      onShippingCheck(e) {
        // check
        if (e.target.checked) {
          // update billing
          this.update({
            shipping : 'billing',
          });
        } else {
          // update billing
          this.update({
            shipping : {},
          });
        }
      }

      onBillingAddress(billing) {
        // update billing
        this.update({
          billing,
        });
      }

      onShippingAddress(shipping) {
        // update billing
        this.update({
          shipping,
        });
      }

      onEmail(e) {
        // update
        this.update({
          email : e.target.value,
        });
      }

      onEnablePayment(connect, value) {
        // enable payment
        this.enabled.payment = true;

        // add to state
        this.update({
          payment : {
            uuid : connect.uuid,
            type : connect.type,
            value,
          },
        });
      }

      onDisablePayment() {
        // enable payment
        this.enabled.payment = false;

        // add to state
        this.update({
          payment : null,
        });
      }

      onInformation() {
        // check information
        const can = (this.checkout.get('data.order.billing') ? Object.keys(this.state.billing).length : true) && ((this.auth && this.auth.exists()) || (this.props.email || '').length || this.state.email.length);
        
        // check can
        if (can) {
          // add to items
          const items = (this.state.items || []).filter(i => i.step !== 'information');

          // push to items
          items.push({
            key   : 'Contact',
            step  : 'information',
            value : this.props.email || this.state.email || (this.auth && this.auth.exists() ? this.auth.user.get(this.checkout.field('auth', 'email').name || this.checkout.field('auth', 'email').uuid) : ''),
          });

          // update items
          this.update({
            items,
          });
        }

        // return can
        return can;
      }

      onShipping() {
        // return shipping
        const can = (this.checkout.get('data.order.shipping.uuid') ? (this.state.shipping === 'billing' || Object.keys(this.state.shipping).length) : true);

        // check can
        if (can) {
          // add to items
          const items    = (this.state.items || []).filter(i => i.step !== 'shipping');
          const shipping = this.getShipping();

          // push to items
          items.push({
            key : 'Ship to',
            step : 'shipping',
            value : `
              ${shipping.street ? `${shipping.street},` : ''}
              ${shipping.city ? `${shipping.city}` : ''}
              ${shipping.postcode ? `${shipping.postcode},` : ''}
              ${shipping.country ? `${shipping.country}` : ''}`,
          });

          // update items
          this.update({
            items,
          });
        }

        // return can
        return can;
      }

      onBack(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // get index
        const index = this.steps.map((s) => s.toLowerCase()).indexOf(this.state.step);
        
        // update step
        this.update({
          step : this.steps[index - 1].toLowerCase(),
        });
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////
      
      /**
       * get class
       */
      getClass(name, def) {
        // get classes
        const classes = this.props.classes || {};

        // check name
        if (!classes[name]) return def;

        // return props
        return classes[name];
      }

      /**
       * get product field
       */
      getProduct(product, key, d) {
        // product field
        const productField = this.checkout.field('product', key.split('.')[0]) || {};

        // return
        return dotProp.get(product.product.get(), `${productField.name || productField.uuid}${key.split('.').length > 1 ? `.${key.split('.').slice(1).join('.')}` : ''}`) || d;
      }

      /**
       * get product field
       */
      getDiscount(key, d) {
        // product field
        const discountField = this.checkout.field('discount', key.split('.')[0]) || {};

        // return
        return dotProp.get(this.checkout.cart.get('discount').get(), `${discountField.name || discountField.uuid}${key.split('.').length > 1 ? `.${key.split('.').slice(1).join('.')}` : ''}`) || d;
      }

      /**
       * get is billing
       */
      getIsBilling() {
        // check billing
        return this.state.shipping === 'billing' ? { checked : true } : {};
      }

      /**
       * get is shipping
       */
      getShipping() {
        // return shipping
        return this.state.shipping === 'billing' ? this.state.billing : this.state.shipping;
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }

  </script>
</checkout>